#include <iostream>
#include <string>
using namespace std;

struct Image {
    int imageID;
    string filename;
    string resolution;
    string tag;
    Image* next;
};

Image* head = nullptr;     // Start of linked list
Image* current = nullptr;  // Used for browsing images

// Function to add a new image at the end
void addImage(int id, string filename, string resolution, string tag) {
    Image* newImage = new Image{id, filename, resolution, tag, nullptr};

    if (head == nullptr) {
        head = newImage;
        current = head;
    } else {
        Image* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newImage;
    }

    cout << "Image added successfully.\n";
}

// Function to delete an image by ID
void deleteImage(int id) {
    if (head == nullptr) {
        cout << "Gallery is empty.\n";
        return;
    }

    // If the head node is to be deleted
    if (head->imageID == id) {
        Image* toDelete = head;
        head = head->next;
        delete toDelete;
        cout << "Image deleted.\n";
        return;
    }

    // Otherwise, search the list
    Image* temp = head;
    while (temp->next && temp->next->imageID != id) {
        temp = temp->next;
    }

    if (temp->next == nullptr) {
        cout << "Image not found.\n";
    } else {
        Image* toDelete = temp->next;
        temp->next = toDelete->next;
        delete toDelete;
        cout << "Image deleted.\n";
    }
}

// Function to display all images
void viewAllImages() {
    if (head == nullptr) {
        cout << "No images in the gallery.\n";
        return;
    }

    cout << "\n--- All Images ---\n";
    Image* temp = head;
    while (temp != nullptr) {
        cout << "Image ID: " << temp->imageID << endl;
        cout << "Filename: " << temp->filename << endl;
        cout << "Resolution: " << temp->resolution << endl;
        cout << "Tag: " << temp->tag << endl;
        cout << "---------------------\n";
        temp = temp->next;
    }
}

// Function to display the next image (cyclic view)
void nextImage() {
    if (current == nullptr) {
        cout << "Gallery is empty.\n";
        return;
    }

    cout << "\n--- Viewing Image ---\n";
    cout << "Image ID: " << current->imageID << endl;
    cout << "Filename: " << current->filename << endl;
    cout << "Resolution: " << current->resolution << endl;
    cout << "Tag: " << current->tag << endl;
    cout << "----------------------\n";

    current = (current->next) ? current->next : head;
}

int main() {
    int choice, id;
    string filename, resolution, tag;

    do {
        cout << "\n--- IMAGE GALLERY MENU ---\n";
        cout << "1. Add Image\n";
        cout << "2. Delete Image\n";
        cout << "3. View All Images\n";
        cout << "4. Next Image\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter Image ID: ";
                cin >> id;
                cout << "Enter Filename: ";
                cin >> filename;
                cout << "Enter Resolution: ";
                cin >> resolution;
                cout << "Enter Tag: ";
                cin >> tag;
                addImage(id, filename, resolution, tag);
                break;

            case 2:
                cout << "Enter ID to delete: ";
                cin >> id;
                deleteImage(id);
                break;

            case 3:
                viewAllImages();
                break;

            case 4:
                nextImage();
                break;

            case 5:
                cout << "Exiting program.\n";
                break;

            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 5);

    return 0;
}
